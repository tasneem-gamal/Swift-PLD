"Name"     = 'Swift Language'
"Author"   = 'Tasneem'
"Version"  = '1.0'
"About"    = 'A basic Gold Parser syntax resembling Swift'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Integer       = {digit}+

! -------------------------------------------------
! Rules
! -------------------------------------------------

<Program> ::= <StatementList>

<StatementList> ::= 
               | <StatementList> <Statement>
               | <Statement>

<Statement> ::= <VariableDeclaration> | <Assignment> 
             | <IfStatement> | <SwitchStatement> 
             | <ForInLoop> | <WhileLoop> | <RepeatWhileLoop> 
             
<VariableDeclaration> ::= <KeyWord> Identifier ':' <Type> '=' <Expression> 
                       
<KeyWord> ::= 'let' | 'var'

<Type> ::= 'int' | 'string' | 'bool' | 'float' | 'character' | 'double'
        
<Assignment> ::= <KeyWord> Identifier '=' <Expression>
              
<IfStatement> ::= 'if' '(' <Expression> ')' '{' <StatementList> '}'
               |'if' '(' <Expression> ')' '{' <StatementList> '}' 'else' '{' <StatementList> '}'
               
<SwitchStatement> ::= 'switch' '('<Expression>')' '{' <CaseList> <Default> '}'

<CaseList> ::= 
           | <CaseList> 'case' <Expression> ':' <StatementList> 
           | 'case' <Expression> ':' <StatementList> 
           
<Default> ::= 'default' ':' <StatementList> 
           
<ForInLoop> ::= 'for' Identifier 'in' Identifier '{' <StatementList> '}'
           
<WhileLoop> ::= 'while' '(' <Expression> ')' '{' <StatementList> <IncDec> '}'

<IncDec>::= Identifier '++'
         | Identifier '--'  
         
<RepeatWhileLoop> ::= 'repeat' '{' <StatementList> '}' 'while' '(' <Expression> ')' 
                   
<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '!=' <Add Exp>    !Not equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 


<Value>       ::= Identifier
               |Integer
               |StringLiteral
               |  '(' <Expression> ')'
